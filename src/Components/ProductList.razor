@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div class="card-columns" style ="padding-bottom:60px;">
    @foreach (var product in ProductService.GetProducts())
    {
        <div class="card">
            <div class="card-img" style="background-image: url('@product.Image');">
            </div>
            <div class="card-body">
                <h5 class="card-title">@product.Title</h5>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    <button @onclick="(e => SelectProduct(product?.Id ?? string.Empty))"
                            data-toggle="modal" data-target="#productModal" class="card-button">
                        <span>More Info</span>
                    </button>
                </small>
            </div>
        </div>
    }
</div>


<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        @if (selectedProduct != null)
        {
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
							@if (selectedProduct.Feedback != null)
							{
								<h5 class="card-text"> Feedbacks: </h5>
								@foreach (var feedback in selectedProduct.Feedback)
								{
									<p class="card-text"> >>> @feedback</p>
								}
							}
						<div class="card-footer">
							<div class="row">
                                    <div class="col">
                                        <input class="form-control-sm" type="text" @onchange="(e) => UpdateMessageText(e.Value.ToString())" id="feedbackMessage" value="@MessageText" placeholder="Enter your comment here" />
                                        <button @onclick="(e => AddFeedback())" data-dismiss="modal" id="addFeedback" class="btn btn-success">Add Feedback</button>
                                        <div id="errorMessage" style="display: none; color: red;">Please enter your feedback before submitting.</div>
                                        <div id="successMessage" style="display: none; color: green;">Feedback submitted successfully!</div>
                                     
                                    </div>
							</div>
						</div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        }
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    Product? selectedProduct;
    string? selectedProductId;
	string MessageText = null;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string? voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct?.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct?.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct?.Id}: {rating}");
        if (selectedProductId == null)
            return;
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }
	void UpdateMessageText(string message)
	{
		MessageText = message;
	}

	void AddFeedback()
	{
		if (!string.IsNullOrWhiteSpace(MessageText) && MessageText.Replace(" ", "").Length > 0)

		{

			ProductService.AddFeedckToProduct(selectedProductId, MessageText);
			MessageText = null;
		}
	}
}
